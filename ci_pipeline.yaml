name: CI/CD with Docker and Kubernetes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Set an environment variable for the image name (use your Docker Hub username)
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/ci-cd-exercise-app
  
jobs:
  # Job 1: Build, Test, and Push (Continuous Integration)
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # CI Steps (same as before)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies and Run Tests
        run: npm install && npm run lint && npm test
        
      # --- Docker Build and Push Steps ---
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest, ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          # The tags include 'latest' and a unique tag based on the commit SHA

      # The output tag is used in the deployment job
      - name: Set deployed image tag
        id: set_image
        run: echo "IMAGE_TAG=${{ env.IMAGE_NAME }}:sha-${{ github.sha }}" >> $GITHUB_ENV
        
      # Step to pass the K8s manifest as an artifact for the next job
      - name: Upload K8s Manifest
        uses: actions/upload-artifact@v4
        with:
          name: k8s-manifest
          path: deployment.yaml

  # Job 2: Deploy to Kubernetes (Continuous Delivery)
  deploy:
    runs-on: ubuntu-latest
    needs: build-test-push
    
    # CRITICAL: Only run deployment on successful push/merge to main
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Download K8s Manifest
        uses: actions/download-artifact@v4
        with:
          name: k8s-manifest
          path: deploy/

      - name: Replace Placeholder in K8s Manifest
        id: replace_image
        run: |
          # Use the commit-specific tag to ensure latest image is deployed
          IMAGE_TAG="${{ needs.build-test-push.outputs.image_tag }}"
          
          # Replace the placeholder in the downloaded manifest with the actual image tag
          sed -i 's|REPLACE_ME_WITH_YOUR_DOCKER_IMAGE:latest|${{ env.IMAGE_NAME }}:sha-${{ github.sha }}|g' deploy/deployment.yaml

      - name: Display final Kubernetes Manifest
        run: cat deploy/deployment.yaml

      # --- Simulate Kubernetes Deployment ---
      
      - name: Setup Kubeconfig (Simulated)
        run: echo "Simulating connection to Kubernetes cluster..."
        
      - name: Apply Kubernetes Manifest
        run: |
          echo "Applying deployment.yaml to cluster..."
          # In a real environment, this would be: kubectl apply -f deploy/deployment.yaml
          echo "Deployment command: kubectl apply -f deploy/deployment.yaml"
          echo "Successfully initiated K8s deployment of ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}"